#summary REPK manual
#labels Featured

=REPK Manual=

repk by Gabrielle Rocap and Eric Collins (rec3141.at.gmail.com)



==OVERVIEW==

REPK (*R* estriction *E* ndonuclease *P* ic *K* er) finds sets of 4 commercially available restriction endonucleases which together uniquely differentiate user-designated sequence groups from a user-supplied FASTA format sequence file of _any gene_, not just 16S rRNA.  The user-defined sequences groups allow the user to determine particular groups (e.g. taxonomic) of sequences to be differentiated by the program.  REPK is thus particularly useful in the case where a microbial community has been characterized by clone library analysis, as the actual sequences can be input into the program.  In this regard, shoving the entire RDP database through this program will a) certainly not work and b) be a waste of time -- to look at a very large community just use some common tetrameric restriction enzymes (e.g. see Engebretson and Moyer, 2003).  However, if you have a database of known sequences from an environment, this program could be useful to pick some enzymes that uniquely discriminate the different groups in your database.

==INPUTS==
===1. Multiple sequence alignment in FASTA format.===
All sequences should begin at the 5' end of your LABELED primer and end at the 3' end of your UNLABELED primer.  The sequences names should have no whitespace or weird characters (- a-z A-Z 0-9 . ; | {{{_}}} are OK, everything else will be removed). Unknown/bad sequence data should be replaced by X's or N's, and these areas should make up a small part of the sequences because they might have restriction sites that will be missed by this program.

  * Sequence groups are coded as characters of the taxa name and separated by a delimiter, and each sequence can have multiple delimiters.
  * You may find the [http://rdp.cme.msu.edu/classifier/classifier.jsp RDP classifier] useful in generating these subsets.

An [http://repk.googlecode.com/files/alignment.4.fas example file] might look like this:

{{{
>Pyrococcus_abyssi_GE5
ATTCCGGTTGATCCTGCCGGAGGCCACTGCTATGGGGGTCCGACTAAGCC
>Pyrodictium_occultum_strPL-19_DSM_2709_TYPE
ACTCCGGTTGATCCTGCCGGGCCCGACCGCTATCGGGGTGGGACTAAGCC
>Staphylothermus_achaiicus_strP8(BK20S6-10-b1)
xTTCCGGTTGATCCTGCCGGACCCGACCGCTATCGGGGTGGGGCTAAGCC
}}}

===2. Optional: RDP-Classifier output===
This optional input allows you to use the output from [http://rdp.cme.msu.edu/classifier/ RDP-Classifier] to automatically add group names to your sequences.  To use it, go the site above and enter the same FASTA sequence file you will use for REPK.  Click "Submit" then click "show assignment detail" when it is finished.  On the right will be a box that says "download as text file".  Save and open this file and go back to REPK.  Copy and paste the contents of the RDP-Classifier output into the text box marked "Enter your RDP Classifier output file here". 




==OPTIONS==
===1. Restriction endonucleases and cut sites===
All commercially available Type IIP restriction endonucleases (i.e. not including [http://repk.googlecode.com/files/enzymes_weird_612.txt Type IIA,B], etc.) from [http://rebase.neb.com/rebase/rebase.html REBASE] are available ([http://repk.googlecode.com/files/enzymes_type2_612.txt see them here]).  You can use all of them, some of them, or none of them.  A custom enzyme (or list of enzymes) can be entered as well, e.g. a fake "no cut" enzyme.

  * _TIP_ The easiest way to use a subset of the REBASE list is to open the plaintext file and remove the lines you do not want to include, then paste the rest into the Custom enzyme box.

===2. Group Subset Delimiter===

The character used to separate groups in your FASTA sequence names, current only underscore (*{{{_}}}*) is allowed.  The example file above uses underscore group subset delimiters.

===3. Group Subset===
Selects group subset to differentiate.

Using the example file above, each delimiter (underscore in this case) will differentiate the sequences by:
  # Genus
  # Species
  # strain

Using the example file above with the example RDP-Classifier file , each delimiter will differentiate the sequences by:
  # Domain
  # Phylum
  # Class
  # Order
  # Family
  # Genus
  # Genus (again)
  # Species
  # strain

In this example, running the program with a 6 will search for enzymes that discriminate the different Families in the dataset. If you want to to find enzymes that discriminate the different Families in the dataset, rerun using 5 as the group subset.  Default is 1.


===4. Cutoff===
This is the furthest apart (in basepairs) that two fragments can be in length and still be considered the same fragment.  This should be set considering such things as the amount of known variation in the sequences and the expected variability in fragment length determination by your capillary electrophoresis machine or gel sequencer.  Default is 5.

===5. Min/Max Fragment Lengths===
The shortest and longest fragment lengths acceptable.  You might change these depending on, e.g. the length of your PCR product, the mimimum or maximum fragment length your capillary electrophoresis machine can read accurately, the range of fragment lengths that survive your cleanup procedure, or the presence of primers and primer dimers. Any fragments shorter or longer than this won't be included in the analysis, but will be present in the 'fragfile' output.  Defaults are 75 and 900.

===6. Stringency===
An individual enzyme must distinguish MORE than this percent of groups to be acceptable.  It is useful to increase this number (up to 100) if you get a lot of hits and the program takes a long time to execute or gives an error.  Change this first if you find too many enzymes.  Default is 0.

===7. Maximum Missing Group Combinations ===
The maximum number of sequence group combinations allowed to be missed by each enzyme. As an example, if there are three different sequence groups (A, B, C) then there are also three sequence group combinations (AB, AC, BC). If it is not possible to distinguish any one of those sequence group combinations (e.g. A from C) then choosing "1" for this option will allow REPK to miss one group combination (AC) but still find enzymes that distinguish A from B and B from C.  If this number is set too high then it will return many results and the program will fail. Default is 0.

===8. Max Matches Returned===
The maximum number of results to return, up to 10000.  Will only return the highest ranking results.  Default is 100.


==OUTPUTS==

The program makes a new directory for every run and writes several files inside which can be accessed for up to 48 hours by bookmarking the unique URL given on the Results page.

===renamed.fasta===
Only if RDP-Classifier output was used, this is the input file with sequences renamed by RDP-Classifier.

===enzymes_type2.txt===
The REBASE enzyme list, if used in the analysis

===custom.txt===
The list of enzymes used in the analysis if selected from REBASE list or manually inputted, if any were selected.

===success.txt===
This file lists the enzymes that singlehandedly distinguish all of the groups.

===no_cuts.txt===
This file lists the enzymes that don't cut/distinguish any of the groups within the basepair cutoffs.

===yes_cuts.txt===
This file lists the enzymes that did cut and distinguish any of the groups within the basepair cutoffs.  This contents of this file can be used in the custom enzyme box.
 
===fragfile.txt===
This file shows the fragment lengths for each sequence and enzyme combination.

===enzmatrix.txt===
This is the file used by the program to calculate the best enzymes. Each column contains a pair of groups, and each row contains the enzyme name. A zero indicates that the enzyme does not distinguish those groups from each other. A one indicates that the enzyme does distinguish those groups from each other. The stringency setting specifies the fraction of ones that an enzyme must have to be acceptable.  This file can be useful in the case that there are no sets which uniquely differentiate your sequences.

===finalout.txt===
This is the final output which shows all of the successful enzyme groups.
  * "Enzyme Picker Key" is a key for the lower part.
    * Each numbered group of enzymes distinguishes the same groups of sequences (NOTE that they do not give the same fragment lengths, they only distinguish the same groups)
  * "Enzyme sets" shows the enzyme sets that uniquely differentiate your sequences
    * Score: the sum of the fractions of sequence groups discriminated by all of the enzymes (a perfect score equals 4).
  * Enzyme sets: each enzyme listed is only the first member of the set from "Enzyme Picker Key", so choosing any other member of the same group will yield the same discriminatory abilities.
    * Choose your enzyme based upon price, fragment lengths, whatever.

===missingout.txt===
Same as finalout.txt but with the partially successful enzyme groups.


==HINTS AND TIPS==
===Too few enzymes===
  * Decrease the stringency if possible.
  * Re-examine the groups you are trying to differentiate, check to see if there are any groups that are not differentiable at all (check out enzmatrix.txt)
  * Re-examine the cutoff: lowering it will probably give more fragments that could be used to differentiate groups, but could also separate groups that are really the same.
  * Re-examine the min/max fragment lengths: allowing more lengths might allow more different fragments.
  * Increase the number of missing groups allowed.

===Too many enzymes===
  * Increase the stringency
  * Increase the cutoff: the fragments will have to be better separated by the enzymes
  * Decrease the number of missing groups allowed.


===Under the hood===
Computationally, the program first performs an in silico digestion of the inputted sequences (both forward and reverse complemented), with each restriction enzyme selected by the user, to find the terminal restriction fragment length for each enzyme for each sequence.  Next the stringency filter is applied so that only the fraction of enzymes that passes the user-defined stringency cutoff continue.  Those enzymes are then scanned to find those that either do not differentiate any sequence groups or differentiate them all (within the user-defined maximum and minimum fragment lengths), and those are removed.  The remaining enzymes are binned by their identical ability to differentiate sequence groups (not necessarily with the same fragment lengths, however).  Finally, all enzyme bins are logically compared quad-wise with every other possible combination of 3 enzyme bins to find sets of 4 bins that together differentiate every sequence group.  A score is calculated based upon the total number of sequence groups differentiated by the bin group divided by the number of sequence groups (thus maximum score of 4) and the successful bin groups are reported to the user sorted by score.

==REFERENCES==
Cole JR, Chai B, Farris RJ, Wang Q, Kulam SA, McGarrell DM, Garrity GM, Tiedje JM. The Ribosomal Database Project (RDP-II): sequences and tools for high-throughput rRNA analysis. Nucleic Acids Research 2005 Jan 1;33(Database Issue):D294-D296. doi: 10.1093/nar/gki038.

Engebretson JJ, Moyer CL (2003) Fidelity of select restriction endonucleases in determining microbial diversity by terminal-restriction fragment length polymorphism.  Applied and Environmental Microbiology 69:4823-4829.

Ludwig W, Strunk O, Westram R, Richter L, Meier H, Yadhu K, et al. (2004) ARB: a software environment for sequence data.  Nucleic Acids Research 32:1363–1371.

Marsh TL, Saxman P, Cole J, Tiedje J (2000) Terminal restriction fragment length polymorphism analysis program, a web-based research tool for microbial community analysis.

Ricke P, Kolb S, Braker G (2005) Application of a newly developed ARB software-integrated tool for in silico terminal restriction fragment length polymorphism analysis reveals the dominance of a novel pmoA cluster in a forest soil.  Applied and Environmental Microbiology 71:1671-1673.

Roberts RJ, Vincze T, Posfai J, Macelis D (2005) REBASE Restriction enzymes and DNA methyltransferases.  Nucleic Acids Research 33:D230-D232. 







